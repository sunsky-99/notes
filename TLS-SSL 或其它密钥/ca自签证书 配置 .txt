keystore：密钥库。可以理解为一种数据库，里面存的是受信任的公钥和自己的私钥，可以存多个。服务端和客户端各有一个。常见的文件后缀有keystore，jks，p12等等
csr：证书签名请求文件。是由keystore文件里的自签名证书（后面会说是什么）生成出来的，一般于给CA机构，对该文件进行签名。签名后会变为cer文件。
cer：证书文件。就是一般我们所说的证书了，里面保存了公钥和主体信息。常见的文件后缀有cer，crt，rsa等。 

-genkeypair：生成一个密钥对 
-alias：密钥对别名 
-keystore：要生成密钥库的路径 
-storepass：密钥库密码
-validity 3650 密钥对指定有效期为3650，即10年
-storetype pkcs12 行业标准格式 PKCS12
-certreq            生成证书请求
 -changealias        更改条目的别名
 -delete             删除条目
 -exportcert         导出证书
 -genkeypair         生成密钥对
 -genseckey          生成密钥
 -gencert            根据证书请求生成证书
 -importcert         导入证书或证书链
 -importkeystore     从其他密钥库导入一个或所有条目
 -keypasswd          更改条目的密钥口令
 -list               列出密钥库中的条目
 -printcert          打印证书内容
 -printcertreq       打印证书请求的内容
 -printcrl           打印 CRL 文件的内容
 -storepasswd        更改密钥库的存储口令 

客户端的密钥库文件client.keystore，服务端的密钥库server.keystore，CA的密钥库ca.keystore
keytool -genkeypair -alias client -keystore d:\client.keystore -storepass 123456 -storetype pkcs12 -validity 3650 -keyalg RSA
keytool -genkeypair -alias server -keystore d:\server.keystore -storepass 123456 -storetype pkcs12 -validity 3650 -keyalg RSA
keytool -genkeypair -alias ca -keystore d:\ca.keystore -storepass 123456 -storetype pkcs12 -validity 3650 -keyalg RSA

查看密钥库详情
keytool -list -keystore d:\client.keystore -storepass 123456 -v
CA生成自己的自签名证书文件,用自己ca.keystore,生成了cer文件
keytool -exportcert -alias ca -keystore d:\ca.keystore -storepass 123456 -file d:\ca.cer -validity 3650
服务端生成证书签名请求文件,通过server.keystore，来生成一个证书签名请求文件（*.csr）
keytool -certreq -alias server -keystore d:\server.keystore -storepass 123456 -file d:\server.csr 
CA对证书请求文件进行签发,ca.keystore密钥库中的密钥对，对.csr文件进行签发
keytool -gencert -alias ca -keystore d:\ca.keystore -storepass 123456 -infile d:\server.csr -outfile d:\server.cer -validity 3650
服务端将ca.cer导入到自己的server.keystore文件中
keytool -importcert -alias ca -keystore d:\server.keystore -storepass 123456 -file d:\ca.cer
服务端将server.cer证书导入到自己的密钥库中
keytool -importcert -alias server -keystore d:\server.keystore -storepass 123456 -file d:\server.cer
keytool -list -keystore d:\server.keystore -storepass 123456 -v
将CA的ca.cer导入到客户端的密钥库中
keytool -importcert -alias ca -keystore d:\client.keystore -storepass 123456 -file d:\ca.cer
现在三个密钥库中的情况是：

client中有自己的密钥对“client”，信任的ca证书“ca”
server中有自己的密钥对“server”，信任的ca证书“ca”，其中，“server”证书是一个证书链
ca中有自己的密钥对“ca”
此时已能实现客户端对服务端的单向认证；
双向认证则需服务端开启双向认证后，服务端导入客户端的cer证书   

tomcat中 Connector标签属性 
clienlAuth:设置是否双向验证,默认为false，设置为true代表双向验证  
keystoreFile:存储加密证书的密钥库  
keystorePass:密钥库访问密码
truststoreFile:保存信任证书的密钥库。这里只需要证书（公钥）即可，而我们服务端密钥库将客户端证书添加信任的同时也保存了他，所以这里可以直接设置服务端密钥库地址。假如有客户端的密钥库的话，或者新建了一个密钥库用以专门保存信任证书的话，也可以写它的地址，虽然我们只用它的公钥
truststorePass:保存信任证书密钥库的访问密码   
 <Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol"
               maxThreads="150" SSLEnabled="true">
        <SSLHostConfig>
            <Certificate certificateKeystoreFile="conf/server.keystore" certificateKeystorePassword="123456"
                         type="RSA" />
        </SSLHostConfig>
    </Connector>
 
